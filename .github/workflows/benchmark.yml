name: Performance Benchmark

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  benchmark:
    name: Performance Regression Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout current branch
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-benchmark-${{ hashFiles('**/Cargo.lock') }}

    - name: Install critcmp
      run: cargo install critcmp

    - name: Create benchmark data directory
      run: mkdir -p target/criterion

    - name: Run baseline benchmark (master/main)
      run: |
        # Determine baseline branch
        if git show-ref --verify --quiet refs/remotes/origin/master; then
          BASELINE_BRANCH="master"
        else
          BASELINE_BRANCH="main"
        fi
        
        echo "Using $BASELINE_BRANCH as baseline branch"
        echo "Current ref: ${{ github.ref_name }}"
        echo "Current sha: ${{ github.sha }}"
        
        # Check if we're on a PR or different branch
        if [ "${{ github.event_name }}" = "pull_request" ] || [ "${{ github.ref_name }}" != "$BASELINE_BRANCH" ]; then
          echo "Running baseline benchmark from $BASELINE_BRANCH"
          # Save current state
          CURRENT_SHA=${{ github.sha }}
          # Checkout baseline branch
          git fetch origin $BASELINE_BRANCH
          git checkout origin/$BASELINE_BRANCH
          # Run baseline benchmark
          cargo bench --features simd --bench markdown_parsers -- --save-baseline baseline
          # Return to current commit
          git checkout $CURRENT_SHA
        else
          echo "On baseline branch, using previous commit as baseline"
          # Use parent commit as baseline when on master/main
          PARENT_SHA=$(git rev-parse HEAD~1)
          if git cat-file -e $PARENT_SHA 2>/dev/null; then
            git checkout $PARENT_SHA
            cargo bench --features simd --bench markdown_parsers -- --save-baseline baseline
            git checkout ${{ github.sha }}
          else
            echo "No parent commit found, creating dummy baseline"
            cargo bench --features simd --bench markdown_parsers -- --save-baseline baseline
          fi
        fi

    - name: Run current benchmark
      run: cargo bench --features simd --bench markdown_parsers -- --save-baseline current

    - name: Compare benchmarks and check for regression
      run: |
        # Generate comparison report
        critcmp baseline current > benchmark_comparison.txt || true
        
        echo "=== Benchmark Comparison Report ==="
        cat benchmark_comparison.txt
        echo "=================================="
        
        # Extract performance data and check for regressions
        python3 << 'EOF'
        import re
        import sys
        import os
        
        def parse_benchmark_results():
            if not os.path.exists('benchmark_comparison.txt'):
                print("No benchmark comparison file found")
                return True
                
            with open('benchmark_comparison.txt', 'r') as f:
                content = f.read()
            
            if not content.strip():
                print("Empty benchmark comparison, assuming no regression")
                return True
            
            # Look for performance changes in the format: [+XX.XX%] or [-XX.XX%]
            # We're looking for regressions (positive percentages indicating slower performance)
            regression_pattern = r'\[([+-])(\d+\.\d+)%\]'
            matches = re.findall(regression_pattern, content)
            
            max_regression = 0
            for sign, percentage in matches:
                if sign == '+':  # Positive means slower (regression)
                    regression = float(percentage)
                    max_regression = max(max_regression, regression)
                    print(f"Found regression: +{regression}%")
                elif sign == '-':  # Negative means faster (improvement)
                    improvement = float(percentage)
                    print(f"Found improvement: -{improvement}%")
            
            # Fail if any benchmark regressed by more than 10%
            if max_regression > 10.0:
                print(f"‚ùå PERFORMANCE REGRESSION DETECTED: {max_regression}% > 10% threshold")
                print("This exceeds the 10% regression threshold!")
                return False
            elif max_regression > 0:
                print(f"‚ö†Ô∏è  Minor performance regression detected: {max_regression}% (within 10% threshold)")
                return True
            else:
                print("‚úÖ No performance regressions detected")
                return True
        
        success = parse_benchmark_results()
        sys.exit(0 if success else 1)
        EOF

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: benchmark-results
        path: |
          benchmark_comparison.txt
          target/criterion/

    - name: Comment PR with benchmark results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let benchmarkContent = '';
          try {
            benchmarkContent = fs.readFileSync('benchmark_comparison.txt', 'utf8');
          } catch (error) {
            benchmarkContent = 'No benchmark comparison data available.';
          }
          
          const comment = `## üìä Performance Benchmark Results
          
          <details>
          <summary>Click to view benchmark comparison</summary>
          
          \`\`\`
          ${benchmarkContent}
          \`\`\`
          
          </details>
          
          **Performance Check**: ${benchmarkContent.includes('‚ùå') ? '‚ùå Regression detected' : '‚úÖ No significant regressions'}
          
          > Benchmarks compare current changes against the master/main branch baseline.
          > A regression of more than 10% will fail this check.
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  benchmark-simd-vs-default:
    name: SIMD vs Default Performance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-simd-benchmark-${{ hashFiles('**/Cargo.lock') }}

    - name: Run default benchmark (no SIMD)
      run: cargo bench --bench markdown_parsers -- --save-baseline default

    - name: Run SIMD benchmark
      run: cargo bench --features simd --bench markdown_parsers -- --save-baseline simd

    - name: Install critcmp
      run: cargo install critcmp

    - name: Compare SIMD vs Default
      run: |
        echo "=== SIMD vs Default Performance Comparison ==="
        critcmp default simd > simd_comparison.txt || true
        cat simd_comparison.txt
        echo "============================================="

    - name: Upload SIMD comparison
      uses: actions/upload-artifact@v4
      with:
        name: simd-comparison
        path: simd_comparison.txt